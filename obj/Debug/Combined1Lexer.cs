//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Konrad\Documents\Visual Studio 2015\Projects\ControlYourPC\ControlYourPC\Combined1.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace sterowanie_glosem {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class Combined1Lexer : Lexer {
	public const int
		T__0=1, T__1=2, INT=3, COMMAND=4, VOICE_UP_COMMAND=5, VOICE_DOWN_COMMAND=6, 
		VOICE_STATE_COMMAND=7, PERCENT=8, WS=9;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "INT", "COMMAND", "VOICE_UP_COMMAND", "VOICE_DOWN_COMMAND", 
		"VOICE_STATE_COMMAND", "PERCENT", "WS"
	};


	public Combined1Lexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'o'", "'na'", null, null, null, null, "'g³oœnoœæ'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "INT", "COMMAND", "VOICE_UP_COMMAND", "VOICE_DOWN_COMMAND", 
		"VOICE_STATE_COMMAND", "PERCENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Combined1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\vh\b\x1\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x6\x4\x1C\n\x4\r\x4"+
		"\xE\x4\x1D\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5"+
		")\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6=\n\x6\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\aX\n\a\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x2\x2\x2\v\x3"+
		"\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2"+
		"\v\x3\x2\x4\x3\x2\x32;\x5\x2\f\f\xF\xF\"\"m\x2\x3\x3\x2\x2\x2\x2\x5\x3"+
		"\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2"+
		"\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x3\x15"+
		"\x3\x2\x2\x2\x5\x17\x3\x2\x2\x2\a\x1B\x3\x2\x2\x2\t(\x3\x2\x2\x2\v<\x3"+
		"\x2\x2\x2\rW\x3\x2\x2\x2\xFY\x3\x2\x2\x2\x11\x62\x3\x2\x2\x2\x13\x64\x3"+
		"\x2\x2\x2\x15\x16\aq\x2\x2\x16\x4\x3\x2\x2\x2\x17\x18\ap\x2\x2\x18\x19"+
		"\a\x63\x2\x2\x19\x6\x3\x2\x2\x2\x1A\x1C\t\x2\x2\x2\x1B\x1A\x3\x2\x2\x2"+
		"\x1C\x1D\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E\b\x3"+
		"\x2\x2\x2\x1F \a|\x2\x2 !\at\x2\x2!\"\a\xF5\x2\x2\")\a\x64\x2\x2#$\aw"+
		"\x2\x2$%\au\x2\x2%&\av\x2\x2&\'\a\x63\x2\x2\')\ay\x2\x2(\x1F\x3\x2\x2"+
		"\x2(#\x3\x2\x2\x2)\n\x3\x2\x2\x2*+\ai\x2\x2+,\a\x144\x2\x2,-\aq\x2\x2"+
		"-.\a\x15D\x2\x2./\ap\x2\x2/\x30\ak\x2\x2\x30\x31\ag\x2\x2\x31=\al\x2\x2"+
		"\x32\x33\ar\x2\x2\x33\x34\aq\x2\x2\x34\x35\a\x66\x2\x2\x35\x36\ai\x2\x2"+
		"\x36\x37\a\x144\x2\x2\x37\x38\aq\x2\x2\x38\x39\a\x15D\x2\x2\x39:\ap\x2"+
		"\x2:;\ak\x2\x2;=\al\x2\x2<*\x3\x2\x2\x2<\x32\x3\x2\x2\x2=\f\x3\x2\x2\x2"+
		">?\a\x65\x2\x2?@\ak\x2\x2@\x41\au\x2\x2\x41\x42\a|\x2\x2\x42\x43\ag\x2"+
		"\x2\x43X\al\x2\x2\x44\x45\a|\x2\x2\x45\x46\a\x65\x2\x2\x46G\ak\x2\x2G"+
		"H\au\x2\x2HX\a|\x2\x2IJ\ar\x2\x2JK\at\x2\x2KL\a|\x2\x2LM\a{\x2\x2MN\a"+
		"\x65\x2\x2NO\ak\x2\x2OP\au\x2\x2PX\a|\x2\x2QR\ay\x2\x2RS\a{\x2\x2ST\a"+
		"\x65\x2\x2TU\ak\x2\x2UV\au\x2\x2VX\a|\x2\x2W>\x3\x2\x2\x2W\x44\x3\x2\x2"+
		"\x2WI\x3\x2\x2\x2WQ\x3\x2\x2\x2X\xE\x3\x2\x2\x2YZ\ai\x2\x2Z[\a\x144\x2"+
		"\x2[\\\aq\x2\x2\\]\a\x15D\x2\x2]^\ap\x2\x2^_\aq\x2\x2_`\a\x15D\x2\x2`"+
		"\x61\a\x109\x2\x2\x61\x10\x3\x2\x2\x2\x62\x63\a\'\x2\x2\x63\x12\x3\x2"+
		"\x2\x2\x64\x65\t\x3\x2\x2\x65\x66\x3\x2\x2\x2\x66g\b\n\x2\x2g\x14\x3\x2"+
		"\x2\x2\a\x2\x1D(<W\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace sterowanie_glosem
