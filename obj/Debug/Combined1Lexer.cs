//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Bartosz\Desktop\ControlPC\ControlYourPC\Combined1.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace sterowanie_glosem {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class Combined1Lexer : Lexer {
	public const int
		T__0=1, INT=2, COMMAND=3, VOICE_UP_COMMAND=4, VOICE_DOWN_COMMAND=5, VOICE_COMMAND=6, 
		PERCENT=7, WS=8;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "INT", "COMMAND", "VOICE_UP_COMMAND", "VOICE_DOWN_COMMAND", "VOICE_COMMAND", 
		"PERCENT", "WS"
	};


	public Combined1Lexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'o'", null, null, null, null, "'g³oœnoœæ'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "INT", "COMMAND", "VOICE_UP_COMMAND", "VOICE_DOWN_COMMAND", 
		"VOICE_COMMAND", "PERCENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Combined1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\n\x63\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x3\x2\x3\x2\x3\x3\x6\x3\x17\n\x3\r\x3\xE\x3\x18\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4$\n\x4\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x5\x5\x38\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6S\n\x6\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x2\x2"+
		"\x2\n\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n"+
		"\x3\x2\x4\x3\x2\x32;\x5\x2\f\f\xF\xF\"\"h\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2"+
		"\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2"+
		"\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x3\x13\x3\x2\x2\x2\x5\x16\x3"+
		"\x2\x2\x2\a#\x3\x2\x2\x2\t\x37\x3\x2\x2\x2\vR\x3\x2\x2\x2\rT\x3\x2\x2"+
		"\x2\xF]\x3\x2\x2\x2\x11_\x3\x2\x2\x2\x13\x14\aq\x2\x2\x14\x4\x3\x2\x2"+
		"\x2\x15\x17\t\x2\x2\x2\x16\x15\x3\x2\x2\x2\x17\x18\x3\x2\x2\x2\x18\x16"+
		"\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19\x6\x3\x2\x2\x2\x1A\x1B\a|\x2\x2\x1B"+
		"\x1C\at\x2\x2\x1C\x1D\a\xF5\x2\x2\x1D$\a\x64\x2\x2\x1E\x1F\aw\x2\x2\x1F"+
		" \au\x2\x2 !\av\x2\x2!\"\a\x63\x2\x2\"$\ay\x2\x2#\x1A\x3\x2\x2\x2#\x1E"+
		"\x3\x2\x2\x2$\b\x3\x2\x2\x2%&\ai\x2\x2&\'\a\x144\x2\x2\'(\aq\x2\x2()\a"+
		"\x15D\x2\x2)*\ap\x2\x2*+\ak\x2\x2+,\ag\x2\x2,\x38\al\x2\x2-.\ar\x2\x2"+
		"./\aq\x2\x2/\x30\a\x66\x2\x2\x30\x31\ai\x2\x2\x31\x32\a\x144\x2\x2\x32"+
		"\x33\aq\x2\x2\x33\x34\a\x15D\x2\x2\x34\x35\ap\x2\x2\x35\x36\ak\x2\x2\x36"+
		"\x38\al\x2\x2\x37%\x3\x2\x2\x2\x37-\x3\x2\x2\x2\x38\n\x3\x2\x2\x2\x39"+
		":\a\x65\x2\x2:;\ak\x2\x2;<\au\x2\x2<=\a|\x2\x2=>\ag\x2\x2>S\al\x2\x2?"+
		"@\a|\x2\x2@\x41\a\x65\x2\x2\x41\x42\ak\x2\x2\x42\x43\au\x2\x2\x43S\a|"+
		"\x2\x2\x44\x45\ar\x2\x2\x45\x46\at\x2\x2\x46G\a|\x2\x2GH\a{\x2\x2HI\a"+
		"\x65\x2\x2IJ\ak\x2\x2JK\au\x2\x2KS\a|\x2\x2LM\ay\x2\x2MN\a{\x2\x2NO\a"+
		"\x65\x2\x2OP\ak\x2\x2PQ\au\x2\x2QS\a|\x2\x2R\x39\x3\x2\x2\x2R?\x3\x2\x2"+
		"\x2R\x44\x3\x2\x2\x2RL\x3\x2\x2\x2S\f\x3\x2\x2\x2TU\ai\x2\x2UV\a\x144"+
		"\x2\x2VW\aq\x2\x2WX\a\x15D\x2\x2XY\ap\x2\x2YZ\aq\x2\x2Z[\a\x15D\x2\x2"+
		"[\\\a\x109\x2\x2\\\xE\x3\x2\x2\x2]^\a\'\x2\x2^\x10\x3\x2\x2\x2_`\t\x3"+
		"\x2\x2`\x61\x3\x2\x2\x2\x61\x62\b\t\x2\x2\x62\x12\x3\x2\x2\x2\a\x2\x18"+
		"#\x37R\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace sterowanie_glosem
